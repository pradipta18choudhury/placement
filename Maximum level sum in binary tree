
#include <bits/stdc++.h>
using namespace std;

struct Node 
{
	int data;
	struct Node *left, *right;
};


int maxLevelSum(struct Node* root)
{
	// Base case
	if (root == NULL)
		return 0;

	queue<Node*> q;
	q.push(root);
	q.push(NULL);
	
	int maxSum=0;
	int localSum=0;
	int level=0;
	int localLevel=0;
	
	while(!q.empty())
	{
	    Node *curr=q.front();
	    q.pop();
	    
	    if (curr==NULL) {
                if (!q.empty()) {
                    // level delimiter
                    q.push(NULL);
                }
 
                if (localSum > maxSum) {
                    maxSum = localSum;
                    level = localLevel;
                }
                // Reset the level sum for next level calculation
                localSum = 0;
                localLevel++;
	    }
	    else
	    {
	        if(curr->left!=NULL)
	        {
	            q.push(curr->left);
	        }
	        if(curr->right!=NULL)
	        {
	            q.push(curr->right);
	        }
	        
	        localSum+=curr->data;
	    }
	}
	return level;
	// for maximum sum print maxSum
}


struct Node* newNode(int data)
{
	struct Node* node = new Node;
	node->data = data;
	node->left = node->right = NULL;
	return (node);
}

// Driver code
int main()
{
	struct Node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(-4);
	root->left->right = newNode(5);
	root->right->right = newNode(-8);
	root->right->right->left = newNode(6);
	root->right->right->right = newNode(7);

	 /*   Constructed Binary tree is:
                 1
               /   \
             2      3
           /  \      \
          -4    5     -8
                    /   \
                   6     7    */
	cout << "Maximum level of largest sum is : " << maxLevelSum(root)
		<< endl;
	return 0;
}
